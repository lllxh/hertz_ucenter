syntax = "proto3";

package user;

// biz/model
option go_package = "hertz/user";

import "api.proto";

enum Gender {
  Unknown = 0;
  Male = 1;
  Female = 2;
}

message User{
  int64 id = 1;
  string userName = 2;
  string userAccount = 3;
  string avatarUrl = 4;
  Gender gender = 5;
  string userPassword = 6;
  string phone = 7;
  string email = 8;
  int64 userStatus = 9;
  int64 userRole = 10;

}

message UserRegisterRequest{
  string userAccount = 1;
  string userPassword = 2;
}

message UserRegisterResponse{
  int32 code = 1;
  string msg = 2;
  uint64 userId = 3;
}

message UserLoginRequest{
  string userAccount = 1;
  string userPassword = 2;
}

message UserLoginResponse{
  int32 code = 1;
  string msg = 2;
  User user = 3;
}

message UserLogoutRequest{
  string userAccount = 1;
}

message UserLogoutResponse{
  int32 code = 1;
  string msg = 2;
}

message UserRequest{
  string keyword = 1;
  string currentPage = 2 [(api.body) = "currentPage", (api.form) = "currentPage", (api.vd) = "$>0"];
  string pageSize = 3 [(api.body) = "pageSize", (api.form) = "pageSize", (api.vd) = "($ > 0 || $ <= 100)"];
}

message UserResponse{
  int32 code = 1;
  string msg = 2;
  repeated User user = 3;
  int64 total = 4;
}

message UserDeleteRequest{
  int64 id = 1 [(api.path) = "id", (api.vd) = "$>0"];
}

message UserDeleteResponse{
  int32 code = 1;
  string msg = 2;
}

message UserUpdateRequest{
  int64 id = 1 [(api.path) = "id", (api.vd) = "$>0"];
  string user_name = 2;
  string user_account = 3;
  string avatar_url = 4;
  Gender gender = 5;
  string user_password = 6;
  string phone = 7;
  string email = 8;
  int64 user_status = 9;
  int64 user_role = 10;
}

message UserUpdateResponse{
  int32 code = 1;
  string msg = 2;
}

message OtherResp {
  string msg = 1;
}


service UserHandler {
  rpc UserRegister(UserRegisterRequest) returns(UserRegisterResponse) {
    option (api.post) = "/v1/user/register";
  }
  rpc UserLogin(UserLoginRequest) returns(UserLoginResponse) {
    option (api.post) = "/v1/user/login";
  }
  rpc UserLogout(UserLogoutRequest) returns(UserLogoutResponse) {
    option (api.post) = "/v1/user/logout";
  }
  rpc QueryUser(UserRequest) returns(UserResponse){
    option (api.post) = "/v1/user/query";
  }
  rpc UpdateUser(UserUpdateRequest) returns(UserUpdateResponse){
    option (api.post) = "/v1/user/update/:user_id";
  }
  rpc DeleteUser(UserDeleteRequest) returns(UserDeleteResponse){
    option (api.post) = "/v1/user/delete/:user_id";
  }
}